"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _object = _interopRequireDefault(require("object.assign"));

require("react");

var _gauge = require("@antv/g2plot/lib/plots/gauge");

var _createPlot = _interopRequireDefault(require("../createPlot"));

var _polyfill = require("./core/polyfill");

var _util = require("@antv/util");

var _warning = _interopRequireDefault(require("warning"));

var _g = require("@antv/g2");

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

// 该plot 无法完全兼容
var _default2 = (0, _createPlot["default"])(_gauge.Gauge, 'GaugeChart', function (opt) {
  var _a = (0, _polyfill.polyfillOptions)(opt),
      range = _a.range,
      _a$min = _a.min,
      min = _a$min === void 0 ? 0 : _a$min,
      _a$max = _a.max,
      max = _a$max === void 0 ? 1 : _a$max,
      value = _a.value,
      options = __rest(_a, ["range", "min", "max", "value"]);

  if ((0, _util.isArray)(range)) {
    (0, _warning["default"])(false, 'range 应当是个对象，请修改配置。');
    options.range = {
      ticks: range.map(function (t) {
        return t / (max - min);
      }),
      color: (0, _g.getTheme)().colors10
    };
  } else {
    options.range = range || {};
  }

  var color = (0, _util.get)(options, 'color');

  if (!(0, _util.isNil)(color)) {
    (0, _warning["default"])(false, '请通过配置属性range.color来配置颜色');
    options.range.color = color;
  }

  if ((0, _util.isNil)((0, _util.get)(options, 'indicator'))) {
    // 默认灰色 indicator
    (0, _util.set)(options, 'indicator', {
      pointer: {
        style: {
          stroke: '#D0D0D0'
        }
      },
      pin: {
        style: {
          stroke: '#D0D0D0'
        }
      }
    });
  }

  if ((0, _util.get)(options, 'statistic.visible')) {
    // 默认使用visible即使用旧版语法的人
    (0, _util.set)(options, 'statistic.title', (0, _util.get)(options, 'statistic'));
  }

  if (!(0, _util.isNil)(min) && !(0, _util.isNil)(max) && !(0, _util.isNil)(value)) {
    // 旧版数据使用方式
    options.percent = value / (max - min);

    var _formatter = (0, _util.get)(options, 'axis.label.formatter');

    (0, _util.set)(options, 'axis', {
      label: {
        formatter: function formatter(v) {
          var val = v * (max - min);

          if ((0, _util.isFunction)(_formatter)) {
            return _formatter(val);
          }

          return val;
        }
      }
    });
  }

  (0, _warning["default"])(!((0, _util.get)(options, 'min') || (0, _util.get)(options, 'max')), '属性 `max` 和 `min` 不推荐使用， 请直接配置属性range.ticks');
  (0, _warning["default"])(!((0, _util.get)(options, 'rangeSize') || (0, _util.get)(options, 'rangeStyle') || 'rangeBackgroundStyle'), '不再支持rangeSize、rangeStyle、rangeBackgroundStyle属性, 请查看新版仪表盘配置文档。'); // value 转为data，用于placeholder统一判断

  var data = !(0, _util.isNil)(options.percent) ? options.percent : value;
  return (0, _object["default"])({
    data: data
  }, options);
});

exports["default"] = _default2;