"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _object = _interopRequireDefault(require("object.assign"));

require("react");

var _wordCloud = require("@antv/g2plot/lib/plots/word-cloud");

var _createPlot = _interopRequireDefault(require("../createPlot"));

var _g = require("@antv/g2");

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var _default2 = (0, _createPlot["default"])(_wordCloud.WordCloud, 'WordCloudChart', function (cfg) {
  var maskImage = cfg.maskImage,
      _cfg$wordField = cfg.wordField,
      wordField = _cfg$wordField === void 0 ? 'word' : _cfg$wordField,
      _cfg$weightField = cfg.weightField,
      weightField = _cfg$weightField === void 0 ? 'weight' : _cfg$weightField,
      _cfg$colorField = cfg.colorField,
      colorField = _cfg$colorField === void 0 ? 'word' : _cfg$colorField,
      selected = cfg.selected,
      shuffle = cfg.shuffle,
      _cfg$interactions = cfg.interactions,
      interactions = _cfg$interactions === void 0 ? [{
    type: 'element-active'
  }] : _cfg$interactions,
      _onGetG2Instance = cfg.onGetG2Instance,
      tooltip = cfg.tooltip,
      wordStyle = cfg.wordStyle,
      onWordCloudHover = cfg.onWordCloudHover,
      onWordCloudClick = cfg.onWordCloudClick,
      others = __rest(cfg, ["maskImage", "wordField", "weightField", "colorField", "selected", "shuffle", "interactions", "onGetG2Instance", "tooltip", "wordStyle", "onWordCloudHover", "onWordCloudClick"]);

  var active = wordStyle.active,
      otherStyles = __rest(wordStyle, ["active"]);

  return (0, _object["default"])({
    colorField: colorField,
    wordField: wordField,
    weightField: weightField,
    imageMask: maskImage,
    random: shuffle,
    interactions: interactions,
    wordStyle: otherStyles,
    tooltip: tooltip && !tooltip.visible ? false : tooltip,
    onGetG2Instance: function onGetG2Instance(c) {
      _onGetG2Instance && _onGetG2Instance(c);

      if (selected >= 0) {
        var chart = c.chart;
        var theme = (0, _g.getTheme)();

        if (active) {
          // debugger;
          (0, _object["default"])(theme.geometries.point['hollow-circle'].active.style, active);
        }

        chart.on('afterrender', function () {
          if (chart.geometries.length) {
            chart.geometries[0].elements.forEach(function (e, idx) {
              if (idx === selected) e.setState('active', true);
            });
          }
        });
        chart.on('plot:mousemove', function (e) {
          if (!e.data) {
            onWordCloudHover && onWordCloudHover(undefined, undefined, e.event);
            return;
          }

          var _e$data$data = e.data.data,
              datum = _e$data$data.datum,
              x = _e$data$data.x,
              y = _e$data$data.y,
              width = _e$data$data.width,
              height = _e$data$data.height;
          onWordCloudHover && onWordCloudHover(datum, {
            x: x,
            y: y,
            w: width,
            h: height
          }, e.event);
        });
        chart.on('plot:click', function (e) {
          if (!e.data) {
            onWordCloudClick && onWordCloudClick(undefined, undefined, e.event);
            return;
          }

          var _e$data$data2 = e.data.data,
              datum = _e$data$data2.datum,
              x = _e$data$data2.x,
              y = _e$data$data2.y,
              width = _e$data$data2.width,
              height = _e$data$data2.height;
          onWordCloudClick && onWordCloudClick(datum, {
            x: x,
            y: y,
            w: width,
            h: height
          }, e.event);
        });
      }
    }
  }, others);
});

exports["default"] = _default2;