"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _object = _interopRequireDefault(require("object.assign"));

require("react");

var _liquid = require("@antv/g2plot/lib/plots/liquid");

var _createPlot = _interopRequireDefault(require("../createPlot"));

var _polyfill = require("./core/polyfill");

var _util = require("@antv/util");

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var _default2 = (0, _createPlot["default"])(_liquid.Liquid, 'LiquidChart', function (opt) {
  var _a = (0, _polyfill.polyfillOptions)(opt),
      range = _a.range,
      _a$min = _a.min,
      min = _a$min === void 0 ? 0 : _a$min,
      _a$max = _a.max,
      max = _a$max === void 0 ? 1 : _a$max,
      value = _a.value,
      options = __rest(_a, ["range", "min", "max", "value"]);

  if (!(0, _util.isNil)(value)) {
    // 旧版数据使用方式
    options.percent = value / (max - min);

    var _formatter = (0, _util.get)(options, 'statistic.content.formatter');

    if (options.statistic !== null && options.statistic !== false) {
      (0, _util.deepMix)(options, {
        statistic: {
          content: {
            formatter: function formatter() {
              if ((0, _util.isFunction)(_formatter)) {
                _formatter(value);
              }

              return value;
            }
          }
        }
      });
    }
  }

  (0, _polyfill.polyfillVisible)(options, 'statistic');
  (0, _polyfill.polyfillVisible)(options, 'statistic.title');
  (0, _polyfill.polyfillVisible)(options, 'statistic.content'); // value 转为data，用于placeholder统一判断

  var data = options.percent;
  return (0, _object["default"])({
    data: data
  }, options);
});

exports["default"] = _default2;