"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.polyfillDescriptionEvent = exports.polyfillTitleEvent = exports.polyfillEvents = exports.polyfillOptions = exports.polyfillVisible = exports.polyfillAxis = exports.replaceApi = void 0;

var _object = _interopRequireDefault(require("object.assign"));

var _warning = _interopRequireDefault(require("warning"));

var _util = require("@antv/util");

var _sum = _interopRequireDefault(require("../../utils/data-transform/sum"));

var _events = require("../../components/Chart/events");

// 批量替换api
var replaceApi = function replaceApi(replaceApiList, options) {
  replaceApiList.forEach(function (item) {
    var sourceKey = item.sourceKey,
        targetKey = item.targetKey,
        notice = item.notice;
    var value = (0, _util.get)(options, sourceKey);

    if (value) {
      (0, _warning["default"])(false, notice);
      (0, _util.set)(options, targetKey, value);
    }
  });
};
/**
 * 将的sourceKey的配置作为targetKey的配置；
 * 例如：将angleAxis的作为xAxis的配置
 */


exports.replaceApi = replaceApi;

var polyfillAxis = function polyfillAxis(cfg, name) {
  var options = (0, _util.get)(cfg, name);

  if (options === false || options === null) {
    cfg[name] = null;
    return;
  }

  if (options === undefined) {
    return;
  }

  if (options === true) {
    cfg[name] = {};
    return;
  }

  if (!(0, _util.isObject)(options)) {
    (0, _warning["default"])(true, "".concat(name, " \u914D\u7F6E\u53C2\u6570\u4E0D\u6B63\u786E"));
    return;
  }

  polyfillVisible(options, 'line');
  polyfillVisible(options, 'grid');
  polyfillVisible(options, 'label');
  polyfillVisible(options, 'tickLine');
  polyfillVisible(options, 'title');
  var label = (0, _util.get)(options, 'label');

  if (label) {
    if ((0, _util.isObject)(label)) {
      var suffix = label.suffix;

      if (suffix) {
        // 不是undefined null 或 suffix存在
        (0, _util.set)(label, 'formatter', function (val) {
          return "".concat(val).concat(suffix);
        });
      } // @ts-ignore


      var offsetX = label.offsetX,
          offsetY = label.offsetY,
          offset = label.offset;

      if ((0, _util.isNil)(offset) && (!(0, _util.isNil)(offsetX) || !(0, _util.isNil)(offsetY))) {
        if (name === 'xAxis') {
          (0, _util.set)(label, 'offset', !(0, _util.isNil)(offsetX) ? offsetX : offsetY);
        }

        if (name === 'yAxis') {
          (0, _util.set)(label, 'offset', !(0, _util.isNil)(offsetY) ? offsetY : offsetX);
        }
      }
    }
  }

  cfg[name] = (0, _object["default"])((0, _object["default"])({}, options), {
    label: label
  });
}; // visible的使用转化


exports.polyfillAxis = polyfillAxis;

var polyfillVisible = function polyfillVisible(polyfillOpt, path) {
  var vis = (0, _util.get)(polyfillOpt, "".concat(path, ".visible"));

  if (vis === false || vis === null) {
    (0, _util.set)(polyfillOpt, path, false);
  }

  return vis;
};

exports.polyfillVisible = polyfillVisible;

var polyfillOptions = function polyfillOptions(opt) {
  var polyfillOpt = (0, _object["default"])({}, opt); // tooltip

  polyfillVisible(polyfillOpt, 'tooltip'); // legend

  var legendVis = polyfillVisible(polyfillOpt, 'legend');

  if (legendVis) {
    polyfillVisible(polyfillOpt, 'legend.title');
    var position = (0, _util.get)(polyfillOpt, 'legend.position');

    if (position) {
      (0, _util.set)(polyfillOpt, 'legend.position', {
        'top-center': 'top',
        'right-center': 'right',
        'left-center': 'left',
        'bottom-center': 'bottom'
      }[position] || position);
    }
  }

  var formatter = (0, _util.get)(polyfillOpt, 'legend.formatter');

  if (formatter) {
    var itemName = (0, _util.get)(polyfillOpt, 'legend.itemName', {});
    (0, _util.set)(polyfillOpt, 'legend.itemName', (0, _object["default"])((0, _object["default"])({}, itemName), {
      formatter: formatter
    }));
  }

  var textConfig = (0, _util.get)(polyfillOpt, 'legend.text');

  if (textConfig) {
    (0, _util.set)(polyfillOpt, 'legend.itemName', textConfig);
  } // label


  polyfillVisible(polyfillOpt, 'label'); // axis

  polyfillAxis(polyfillOpt, 'xAxis');
  polyfillAxis(polyfillOpt, 'yAxis'); // 辅助线

  var guideLine = (0, _util.get)(polyfillOpt, 'guideLine', []);
  var data = (0, _util.get)(polyfillOpt, 'data', []);
  var yField = (0, _util.get)(polyfillOpt, 'yField', 'y');
  guideLine.forEach(function (element) {
    if (data.length > 0) {
      var y = 'median';

      switch (element.type) {
        case 'max':
          y = (0, _util.maxBy)(data, function (d) {
            return d[yField];
          })[yField];
          break;

        case 'mean':
          y = (0, _sum["default"])(data.map(function (d) {
            return d[yField];
          })) / data.length;
          break;

        default:
          // min
          y = (0, _util.minBy)(data, function (d) {
            return d[yField];
          })[yField];
          break;
      }

      var line = (0, _object["default"])((0, _object["default"])({
        start: ['min', y],
        end: ['max', y],
        style: element.lineStyle,
        text: {
          content: y
        }
      }, element), {
        type: 'line'
      });

      if (!(0, _util.get)(polyfillOpt, 'annotations')) {
        (0, _util.set)(polyfillOpt, 'annotations', []);
      }

      polyfillOpt.annotations.push(line);
      (0, _util.set)(polyfillOpt, 'point', false);
    }
  }); // slider

  var interactions = (0, _util.get)(polyfillOpt, 'interactions', []);
  var slider = interactions.find(function (it) {
    return it.type === 'slider';
  });

  if (slider && (0, _util.isNil)(polyfillOpt.slider)) {
    polyfillOpt.slider = slider.cfg;
  }

  return polyfillOpt;
};

exports.polyfillOptions = polyfillOptions;

var polyfillEvents = function polyfillEvents(chart, preOptions, newOptions) {
  // 事件兼容
  var eventNames = (0, _events.pickEventName)((0, _util.get)(preOptions, 'events', []));
  var newEventNames = (0, _events.pickEventName)((0, _util.get)(newOptions, 'events', [])); // 取消事件绑定

  eventNames.forEach(function (ev) {
    chart.off(ev[1], preOptions.events[ev[0]]);
  }); // 重新事件绑定

  newEventNames.forEach(function (ev) {
    chart.on(ev[1], newOptions.events[ev[0]]);
  });
};

exports.polyfillEvents = polyfillEvents;

var polyfillTitleEvent = function polyfillTitleEvent(options) {
  var events = (0, _util.get)(options, 'events', {});
  var titleEvents = {};
  ['onTitleClick', 'onTitleDblClick', 'onTitleMouseleave', 'onTitleMousemove', 'onTitleMousedown', 'onTitleMouseup', 'onTitleMouseenter'].forEach(function (e) {
    if (events[e]) {
      titleEvents[e.replace('Title', '')] = events[e];
    }
  });
  return titleEvents;
};

exports.polyfillTitleEvent = polyfillTitleEvent;

var polyfillDescriptionEvent = function polyfillDescriptionEvent(options) {
  var events = (0, _util.get)(options, 'events', {});
  var titleEvents = {};
  ['onDescriptionClick', 'onDescriptionDblClick', 'onDescriptionMouseleave', 'onDescriptionMousemove', 'onDescriptionMousedown', 'onDescriptionMouseup', 'onDescriptionMouseenter'].forEach(function (e) {
    if (events[e]) {
      titleEvents[e.replace('Description', '')] = events[e];
    }
  });
  return titleEvents;
};

exports.polyfillDescriptionEvent = polyfillDescriptionEvent;