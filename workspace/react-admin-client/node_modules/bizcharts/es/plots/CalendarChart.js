"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _object = _interopRequireDefault(require("object.assign"));

require("react");

var _heatmap = require("@antv/g2plot/lib/plots/heatmap");

var _createPlot = _interopRequireDefault(require("../createPlot"));

var _g2plot = require("@antv/g2plot");

var _polyfill = require("./core/polyfill");

var _util = require("@antv/util");

_g2plot.G2.registerShape('polygon', 'boundary-polygon', {
  draw: function draw(cfg, container) {
    var group = container.addGroup();
    var attrs = {
      stroke: '#fff',
      lineWidth: 1,
      fill: cfg.color,
      paht: []
    };
    var points = cfg.points;
    var path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['Z']]; // @ts-ignore

    attrs.path = this.parsePath(path);
    group.addShape('path', {
      attrs: attrs
    });

    if ((0, _util.get)(cfg, 'data.lastWeek')) {
      var linePath = [['M', points[2].x, points[2].y], ['L', points[3].x, points[3].y]]; // 最后一周的多边形添加右侧边框

      group.addShape('path', {
        attrs: {
          path: this.parsePath(linePath),
          lineWidth: 4,
          stroke: '#404040'
        }
      });

      if ((0, _util.get)(cfg, 'data.lastDay')) {
        group.addShape('path', {
          attrs: {
            path: this.parsePath([['M', points[1].x, points[1].y], ['L', points[2].x, points[2].y]]),
            lineWidth: 4,
            stroke: '#404040'
          }
        });
      }
    }

    return group;
  }
});

var REPLACEAPILIST = [{
  sourceKey: 'colors',
  targetKey: 'color',
  notice: 'colors 是 g2Plot@1.0 的属性，请使用 color 属性替代'
}, {
  sourceKey: 'valueField',
  targetKey: 'colorField',
  notice: 'valueField 是 g2@1.0的属性，即将废弃，请使用colorField替代'
}, {
  sourceKey: 'radiusField',
  targetKey: 'yField',
  notice: 'radiusField 是 g2@1.0的属性，即将废弃，请使用yFeild替代'
}];

var _default2 = (0, _createPlot["default"])(_heatmap.Heatmap, 'CalendarChart', function (props) {
  var options = (0, _polyfill.polyfillOptions)(props);
  (0, _polyfill.replaceApi)(REPLACEAPILIST, options);

  if ((0, _util.isNil)((0, _util.get)(props, 'shape'))) {
    (0, _util.set)(options, 'shape', 'boundary-polygon');
  } // 1.0 的默认值


  if ((0, _util.isNil)((0, _util.get)(options, 'xField')) && (0, _util.isNil)((0, _util.get)(options, 'yField'))) {
    (0, _util.set)(options, 'xField', 'week');
    (0, _util.set)(options, 'meta.week', (0, _object["default"])({
      type: 'cat'
    }, (0, _util.get)(options, 'meta.week', {})));
    (0, _util.set)(options, 'yField', 'day');
    (0, _util.set)(options, 'meta.day', {
      type: 'cat',
      values: ['Sun.', 'Mon.', 'Tues.', 'Wed.', 'Thur.', 'Fri.', 'Sat.']
    });
    (0, _util.set)(options, 'reflect', 'y');
    (0, _util.set)(options, 'xAxis', (0, _object["default"])({
      tickLine: null,
      line: null,
      title: null,
      label: {
        offset: 20,
        style: {
          fontSize: 12,
          fill: '#bbb',
          textBaseline: 'top'
        },
        formatter: function formatter(val) {
          if (val == '2') {
            return 'MAY';
          } else if (val === '6') {
            return 'JUN';
          } else if (val == '10') {
            return 'JUL';
          } else if (val === '14') {
            return 'AUG';
          } else if (val == '18') {
            return 'SEP';
          } else if (val === '24') {
            return 'OCT';
          }

          return '';
        }
      }
    }, (0, _util.get)(options, 'xAxis', {})));
  }

  return options;
});

exports["default"] = _default2;