"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _object = _interopRequireDefault(require("object.assign"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _uniqueId = _interopRequireDefault(require("@antv/util/lib/unique-id"));

var _isEqual2 = _interopRequireDefault(require("@antv/util/lib/is-equal"));

var _isFunction2 = _interopRequireDefault(require("@antv/util/lib/is-function"));

var _withContainer = _interopRequireDefault(require("./boundary/withContainer"));

var _ErrorBoundary = _interopRequireWildcard(require("./boundary/ErrorBoundary"));

var _root = _interopRequireDefault(require("./context/root"));

var _view = _interopRequireDefault(require("./context/view"));

var _plotTools = require("./utils/plotTools");

var _shallowEqual = _interopRequireDefault(require("./utils/shallowEqual"));

var _pickWithout = _interopRequireDefault(require("./utils/pickWithout"));

var _cloneDeep = _interopRequireDefault(require("./utils/cloneDeep"));

var _constant = require("./utils/constant");

var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));

var _getElementSize = _interopRequireDefault(require("./utils/getElementSize"));

var _polyfill = require("./plots/core/polyfill");

var _util = require("@antv/util");

var _warning = _interopRequireDefault(require("warning"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var DEFAULT_PLACEHOLDER = /*#__PURE__*/_react["default"].createElement("div", {
  style: {
    position: 'absolute',
    top: '48%',
    left: '50%',
    color: '#aaa',
    textAlign: 'center'
  }
}, "\u6682\u65E0\u6570\u636E");

var DESCRIPTION_STYLE = {
  padding: '8px 24px 10px 10px',
  fontFamily: 'PingFang SC',
  fontSize: 12,
  color: 'grey',
  textAlign: 'left',
  lineHeight: '16px'
};
var TITLE_STYLE = {
  padding: '10px 0 0 10px',
  fontFamily: 'PingFang SC',
  fontSize: 18,
  color: 'black',
  textAlign: 'left',
  lineHeight: '20px'
};

var BasePlot = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(BasePlot, _React$Component);

  var _super = _createSuper(BasePlot);

  function BasePlot() {
    var _this;

    (0, _classCallCheck2["default"])(this, BasePlot);
    _this = _super.apply(this, arguments);
    _this._context = {
      chart: null
    };
    return _this;
  }

  (0, _createClass2["default"])(BasePlot, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.children && this.g2Instance.chart) {
        this.g2Instance.chart.render();
      }

      (0, _polyfill.polyfillEvents)(this.g2Instance, {}, this.props);
      this.g2Instance.data = this.props.data;
      this.preConfig = (0, _pickWithout["default"])(this.props, [].concat((0, _toConsumableArray2["default"])(_constant.REACT_PIVATE_PROPS), ['container', 'PlotClass', 'onGetG2Instance', 'data']));
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.children && this.g2Instance.chart) {
        this.g2Instance.chart.render();
      } // 兼容1.0 的events写法


      (0, _polyfill.polyfillEvents)(this.g2Instance, prevProps, this.props);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this2 = this;

      if (this.g2Instance) {
        setTimeout(function () {
          _this2.g2Instance.destroy();

          _this2.g2Instance = null;
          _this2._context.chart = null;
        }, 0);
      }
    }
  }, {
    key: "getG2Instance",
    value: function getG2Instance() {
      return this.g2Instance;
    }
  }, {
    key: "getChartView",
    value: function getChartView() {
      return this.g2Instance.chart;
    }
  }, {
    key: "checkInstanceReady",
    value: function checkInstanceReady() {
      if (!this.g2Instance) {
        this.initInstance();
        this.g2Instance.render();
      } else if (this.shouldReCreate()) {
        // 只有数据更新就不重绘，其他全部直接重新创建实例。
        this.g2Instance.destroy();
        this.initInstance();
        this.g2Instance.render();
      } else if (this.diffConfig()) {
        var options = (0, _pickWithout["default"])(this.props, ['container', 'PlotClass', 'onGetG2Instance', 'children']);
        this.g2Instance.update(options);
      } else if (this.diffData()) {
        this.g2Instance.changeData(this.props.data);
      } // 缓存配置


      var currentConfig = (0, _pickWithout["default"])(this.props, [].concat((0, _toConsumableArray2["default"])(_constant.REACT_PIVATE_PROPS), ['container', 'PlotClass', 'onGetG2Instance', 'data']));
      this.preConfig = (0, _cloneDeep["default"])(currentConfig);
      this.g2Instance.data = this.props.data;
    }
  }, {
    key: "initInstance",
    value: function initInstance() {
      var _a = this.props,
          container = _a.container,
          PlotClass = _a.PlotClass,
          onGetG2Instance = _a.onGetG2Instance,
          children = _a.children,
          options = __rest(_a, ["container", "PlotClass", "onGetG2Instance", "children"]);

      this.g2Instance = new PlotClass(container, options);
      this._context.chart = this.g2Instance;

      if ((0, _isFunction2["default"])(onGetG2Instance)) {
        onGetG2Instance(this.g2Instance);
      }
    }
  }, {
    key: "diffConfig",
    value: function diffConfig() {
      // 只有数据更新就不重绘，其他全部直接重新创建实例。
      var preConfig = this.preConfig || {};
      var currentConfig = (0, _pickWithout["default"])(this.props, [].concat((0, _toConsumableArray2["default"])(_constant.REACT_PIVATE_PROPS), ['container', 'PlotClass', 'onGetG2Instance', 'data']));
      return !(0, _isEqual2["default"])(preConfig, currentConfig);
    }
  }, {
    key: "diffData",
    value: function diffData() {
      // 只有数据更新就不重绘，其他全部直接重新创建实例。
      var preData = this.g2Instance.data;
      var data = this.props.data;

      if (!(0, _util.isArray)(preData) || !(0, _util.isArray)(data)) {
        // 非数组直接对比
        return !preData === data;
      }

      if (preData.length !== data.length) {
        return true;
      }

      var isEqual = true;
      preData.forEach(function (element, index) {
        if (!(0, _shallowEqual["default"])(element, data[index])) {
          isEqual = false;
        }
      });
      return !isEqual;
    }
  }, {
    key: "shouldReCreate",
    value: function shouldReCreate() {
      var forceUpdate = this.props.forceUpdate;

      if (forceUpdate) {
        return true;
      }

      return false;
    }
  }, {
    key: "render",
    value: function render() {
      this.checkInstanceReady();
      var chartView = this.getChartView();
      return /*#__PURE__*/_react["default"].createElement(_root["default"].Provider, {
        value: this._context
      }, /*#__PURE__*/_react["default"].createElement(_view["default"].Provider, {
        value: chartView
      }, /*#__PURE__*/_react["default"].createElement("div", {
        key: (0, _uniqueId["default"])('plot-chart')
      }, this.props.children)));
    }
  }]);
  return BasePlot;
}(_react["default"].Component);

var BxPlot = (0, _withContainer["default"])(BasePlot);

function createPlot(PlotClass, name) {
  var transCfg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (cfg) {
    return cfg;
  };

  var Com = /*#__PURE__*/_react["default"].forwardRef(function (props, ref) {
    var title = props.title,
        description = props.description,
        _props$autoFit = props.autoFit,
        autoFit = _props$autoFit === void 0 ? true : _props$autoFit,
        forceFit = props.forceFit,
        _props$errorContent = props.errorContent,
        errorContent = _props$errorContent === void 0 ? _ErrorBoundary.ErrorFallback : _props$errorContent,
        containerStyle = props.containerStyle,
        placeholder = props.placeholder,
        ErrorBoundaryProps = props.ErrorBoundaryProps,
        cfg = __rest(props, ["title", "description", "autoFit", "forceFit", "errorContent", "containerStyle", "placeholder", "ErrorBoundaryProps"]);

    var realCfg = transCfg(cfg);
    var container = (0, _react.useRef)();
    var titleDom = (0, _react.useRef)();
    var descDom = (0, _react.useRef)();

    var _useState = (0, _react.useState)(0),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        chartHeight = _useState2[0],
        setChartHeight = _useState2[1];

    var resizeObserver = (0, _react.useRef)();
    var resizeFn = (0, _react.useCallback)(function () {
      if (!container.current) {
        return;
      }

      var containerSize = (0, _getElementSize["default"])(container.current);
      var titleSize = titleDom.current ? (0, _getElementSize["default"])(titleDom.current) : {
        width: 0,
        height: 0
      };
      var descSize = descDom.current ? (0, _getElementSize["default"])(descDom.current) : {
        width: 0,
        height: 0
      };
      var ch = containerSize.height - titleSize.height - descSize.height;

      if (ch === 0) {
        // 高度为0 是因为用户没有设置高度
        ch = 350;
      }

      if (ch < 20) {
        // 设置了高度，但是太小了
        ch = 20;
      } // 误差达到1像素后再重置，防止精度问题


      if (Math.abs(chartHeight - ch) > 1) {
        setChartHeight(ch);
      }
    }, [container.current, titleDom.current, chartHeight, descDom.current]);
    var resize = (0, _react.useCallback)((0, _util.debounce)(resizeFn, 500), [resizeFn]);
    var FallbackComponent = /*#__PURE__*/_react["default"].isValidElement(errorContent) ? function () {
      return errorContent;
    } : errorContent; // 每个图表的showPlaceholder 逻辑不一样，有的是判断value，该方法为静态方法

    if (placeholder && !realCfg.data) {
      var pl = placeholder === true ? DEFAULT_PLACEHOLDER : placeholder; // plot 默认是400px高度

      return /*#__PURE__*/_react["default"].createElement(_ErrorBoundary["default"], (0, _object["default"])({
        FallbackComponent: FallbackComponent
      }, ErrorBoundaryProps), /*#__PURE__*/_react["default"].createElement("div", {
        style: {
          width: props.width || '100%',
          height: props.height || 400,
          textAlign: 'center',
          position: 'relative'
        }
      }, pl));
    }

    var titleCfg = (0, _plotTools.visibleHelper)(title, false);
    var descriptionCfg = (0, _plotTools.visibleHelper)(description, false);
    var titleStyle = (0, _object["default"])((0, _object["default"])({}, TITLE_STYLE), titleCfg.style);
    var descStyle = (0, _object["default"])((0, _object["default"])((0, _object["default"])({}, DESCRIPTION_STYLE), descriptionCfg.style), {
      top: titleStyle.height
    });
    var isAutoFit = forceFit !== undefined ? forceFit : autoFit;

    if (!(0, _util.isNil)(forceFit)) {
      (0, _warning["default"])(false, '请使用autoFit替代forceFit');
    }

    ;
    (0, _react.useEffect)(function () {
      if (!isAutoFit) {
        if (container.current) {
          resizeFn();
          resizeObserver.current && resizeObserver.current.unobserve(container.current);
        }
      } else {
        if (container.current) {
          resizeFn();
          resizeObserver.current = new _resizeObserverPolyfill["default"](resize);
          resizeObserver.current.observe(container.current);
        } else {
          setChartHeight(0);
        }
      }

      return function () {
        resizeObserver.current && container.current && resizeObserver.current.unobserve(container.current);
      };
    }, [container.current, isAutoFit]);
    return /*#__PURE__*/_react["default"].createElement(_ErrorBoundary["default"], (0, _object["default"])({
      FallbackComponent: FallbackComponent
    }, ErrorBoundaryProps), /*#__PURE__*/_react["default"].createElement("div", {
      ref: container,
      className: "bizcharts-plot",
      style: {
        position: 'relative',
        height: props.height || '100%',
        width: props.width || '100%'
      }
    }, titleCfg.visible && /*#__PURE__*/_react["default"].createElement("div", (0, _object["default"])({
      ref: titleDom
    }, (0, _polyfill.polyfillTitleEvent)(realCfg), {
      className: "bizcharts-plot-title",
      style: titleStyle
    }), titleCfg.text), descriptionCfg.visible && /*#__PURE__*/_react["default"].createElement("div", (0, _object["default"])({
      ref: descDom
    }, (0, _polyfill.polyfillDescriptionEvent)(realCfg), {
      className: "bizcharts-plot-description",
      style: descStyle
    }), descriptionCfg.text), !!chartHeight && /*#__PURE__*/_react["default"].createElement(BxPlot // API 统一
    , (0, _object["default"])({
      // API 统一
      appendPadding: [10, 5, 10, 10],
      autoFit: isAutoFit,
      ref: ref
    }, realCfg, {
      PlotClass: PlotClass,
      containerStyle: (0, _object["default"])((0, _object["default"])({}, containerStyle), {
        height: chartHeight
      })
    }))));
  });

  Com.displayName = name || PlotClass.name;
  return Com;
}

var _default2 = createPlot;
exports["default"] = _default2;